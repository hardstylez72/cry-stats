// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/funds.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FundsServiceClient is the client API for FundsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FundsServiceClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountResp, error)
	AccountExist(ctx context.Context, in *AccountExistReq, opts ...grpc.CallOption) (*AccountExistResp, error)
	GetFunds(ctx context.Context, in *GetFundsReq, opts ...grpc.CallOption) (*GetFundsResp, error)
	GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountRes, error)
	TaskCompleted(ctx context.Context, in *TaskCompletedReq, opts ...grpc.CallOption) (*TaskCompletedRes, error)
	UserTaskHistory(ctx context.Context, in *UserTaskHistoryReq, opts ...grpc.CallOption) (*UserTaskHistoryRes, error)
	AddPromo(ctx context.Context, in *AddPromoReq, opts ...grpc.CallOption) (*AddPromoRes, error)
}

type fundsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFundsServiceClient(cc grpc.ClientConnInterface) FundsServiceClient {
	return &fundsServiceClient{cc}
}

func (c *fundsServiceClient) CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountResp, error) {
	out := new(CreateAccountResp)
	err := c.cc.Invoke(ctx, "/crypay.v1.FundsService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundsServiceClient) AccountExist(ctx context.Context, in *AccountExistReq, opts ...grpc.CallOption) (*AccountExistResp, error) {
	out := new(AccountExistResp)
	err := c.cc.Invoke(ctx, "/crypay.v1.FundsService/AccountExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundsServiceClient) GetFunds(ctx context.Context, in *GetFundsReq, opts ...grpc.CallOption) (*GetFundsResp, error) {
	out := new(GetFundsResp)
	err := c.cc.Invoke(ctx, "/crypay.v1.FundsService/GetFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundsServiceClient) GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountRes, error) {
	out := new(GetAccountRes)
	err := c.cc.Invoke(ctx, "/crypay.v1.FundsService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundsServiceClient) TaskCompleted(ctx context.Context, in *TaskCompletedReq, opts ...grpc.CallOption) (*TaskCompletedRes, error) {
	out := new(TaskCompletedRes)
	err := c.cc.Invoke(ctx, "/crypay.v1.FundsService/TaskCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundsServiceClient) UserTaskHistory(ctx context.Context, in *UserTaskHistoryReq, opts ...grpc.CallOption) (*UserTaskHistoryRes, error) {
	out := new(UserTaskHistoryRes)
	err := c.cc.Invoke(ctx, "/crypay.v1.FundsService/UserTaskHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundsServiceClient) AddPromo(ctx context.Context, in *AddPromoReq, opts ...grpc.CallOption) (*AddPromoRes, error) {
	out := new(AddPromoRes)
	err := c.cc.Invoke(ctx, "/crypay.v1.FundsService/AddPromo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FundsServiceServer is the server API for FundsService service.
// All implementations must embed UnimplementedFundsServiceServer
// for forward compatibility
type FundsServiceServer interface {
	CreateAccount(context.Context, *CreateAccountReq) (*CreateAccountResp, error)
	AccountExist(context.Context, *AccountExistReq) (*AccountExistResp, error)
	GetFunds(context.Context, *GetFundsReq) (*GetFundsResp, error)
	GetAccount(context.Context, *GetAccountReq) (*GetAccountRes, error)
	TaskCompleted(context.Context, *TaskCompletedReq) (*TaskCompletedRes, error)
	UserTaskHistory(context.Context, *UserTaskHistoryReq) (*UserTaskHistoryRes, error)
	AddPromo(context.Context, *AddPromoReq) (*AddPromoRes, error)
	mustEmbedUnimplementedFundsServiceServer()
}

// UnimplementedFundsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFundsServiceServer struct {
}

func (UnimplementedFundsServiceServer) CreateAccount(context.Context, *CreateAccountReq) (*CreateAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedFundsServiceServer) AccountExist(context.Context, *AccountExistReq) (*AccountExistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountExist not implemented")
}
func (UnimplementedFundsServiceServer) GetFunds(context.Context, *GetFundsReq) (*GetFundsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunds not implemented")
}
func (UnimplementedFundsServiceServer) GetAccount(context.Context, *GetAccountReq) (*GetAccountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedFundsServiceServer) TaskCompleted(context.Context, *TaskCompletedReq) (*TaskCompletedRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskCompleted not implemented")
}
func (UnimplementedFundsServiceServer) UserTaskHistory(context.Context, *UserTaskHistoryReq) (*UserTaskHistoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserTaskHistory not implemented")
}
func (UnimplementedFundsServiceServer) AddPromo(context.Context, *AddPromoReq) (*AddPromoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPromo not implemented")
}
func (UnimplementedFundsServiceServer) mustEmbedUnimplementedFundsServiceServer() {}

// UnsafeFundsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FundsServiceServer will
// result in compilation errors.
type UnsafeFundsServiceServer interface {
	mustEmbedUnimplementedFundsServiceServer()
}

func RegisterFundsServiceServer(s grpc.ServiceRegistrar, srv FundsServiceServer) {
	s.RegisterService(&FundsService_ServiceDesc, srv)
}

func _FundsService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundsServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypay.v1.FundsService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundsServiceServer).CreateAccount(ctx, req.(*CreateAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundsService_AccountExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountExistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundsServiceServer).AccountExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypay.v1.FundsService/AccountExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundsServiceServer).AccountExist(ctx, req.(*AccountExistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundsService_GetFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFundsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundsServiceServer).GetFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypay.v1.FundsService/GetFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundsServiceServer).GetFunds(ctx, req.(*GetFundsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundsService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundsServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypay.v1.FundsService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundsServiceServer).GetAccount(ctx, req.(*GetAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundsService_TaskCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCompletedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundsServiceServer).TaskCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypay.v1.FundsService/TaskCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundsServiceServer).TaskCompleted(ctx, req.(*TaskCompletedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundsService_UserTaskHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTaskHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundsServiceServer).UserTaskHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypay.v1.FundsService/UserTaskHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundsServiceServer).UserTaskHistory(ctx, req.(*UserTaskHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundsService_AddPromo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPromoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundsServiceServer).AddPromo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypay.v1.FundsService/AddPromo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundsServiceServer).AddPromo(ctx, req.(*AddPromoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FundsService_ServiceDesc is the grpc.ServiceDesc for FundsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FundsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crypay.v1.FundsService",
	HandlerType: (*FundsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _FundsService_CreateAccount_Handler,
		},
		{
			MethodName: "AccountExist",
			Handler:    _FundsService_AccountExist_Handler,
		},
		{
			MethodName: "GetFunds",
			Handler:    _FundsService_GetFunds_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _FundsService_GetAccount_Handler,
		},
		{
			MethodName: "TaskCompleted",
			Handler:    _FundsService_TaskCompleted_Handler,
		},
		{
			MethodName: "UserTaskHistory",
			Handler:    _FundsService_UserTaskHistory_Handler,
		},
		{
			MethodName: "AddPromo",
			Handler:    _FundsService_AddPromo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/funds.proto",
}
